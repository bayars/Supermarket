# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: gcc

build:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  # before_script:
  #   - apt update && apt -y install make autoconf
  script:
    - apt-get update -y && apt install xmlto -y
    - git clone https://github.com/jtv/libpqxx.git && cd libpqxx && ./configure && make && make install  
    - cd /builds/rection/super-market/ && g++ main.cpp -std=c++2a -lpqxx -lpq -lpthread -pthread  -o mybinary
  artifacts:
    paths:
      - mybinary
      # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
      # cache:
      #   paths:
      #     - "*.o"

# run tests using the binary built before
test:
  stage: test
  script:
    - apt update -y && apt install xmlto cmake -y
    - git clone https://github.com/jtv/libpqxx.git && cd libpqxx && ./configure && make && make install && ls && cd ../..
    - git clone https://github.com/google/googletest.git && cd googletest && mkdir mybuild && cd mybuild && cmake .. && make && make install 
    - cd /builds/rection/super-market/Test/
    - g++ -std=c++2a -Wall -g -pthread testmain.cpp -lgtest_main  -lgtest -lpthread -lpqxx -lpq -o testbinary
  artifacts:
    paths:
      - testbinary
